
/*
 * This file is part of Eqela Samples
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.console
import jk.socket.io
import jk.worker

class:

main
{
	var ctx = new ConsoleApplicationContext()
	var iomgr = IOManager.createDefault()
	if not iomgr {
		Log.error(ctx, "Failed to create IO manager")
		return
	}
	IOManager.setCurrent(iomgr)
	var wmgr = ThreadWorkerManager.forContext(ctx)
	var input = String.toUTF8Buffer("Input Text!")
	var r = wmgr.executeWorker("httpworker", input, func(data as buffer) {
		Log.info(ctx, "From worker: `" .. String.forUTF8Buffer(data) .. "'")
	})
	if not r {
		Log.error(ctx, "Failed to start worker")
		return
	}
	iomgr.execute(ctx)
}
